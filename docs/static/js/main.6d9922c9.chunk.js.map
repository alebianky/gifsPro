{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onFocus","onSubmit","e","preventDefault","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","setImages","useEffect","then","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"oMAKaA,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,cAAqB,EAGTC,mBAAS,IAHA,mBAGxCC,EAHwC,KAG3BC,EAH2B,KA0B/C,OACI,mCACA,sBAAMC,QAPU,WAChBD,EAAc,KAMeE,SAhBb,SAACC,GACbA,EAAEC,iBAEFP,GAAe,SAAAQ,GAAI,OAAMN,GAAN,mBAAqBM,OAGxCL,EAAc,KAUlB,SAEQ,uBACIM,KAAK,OACLC,MAAOR,EACPS,SA5BG,SAACL,GAGjBH,EAAcG,EAAEM,OAAOF,e,8BCZjBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0DAE4CC,UAAUH,GAFtD,sDAIAI,MAAOF,GAJP,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAXtB,kBAeZM,GAfY,4CAAH,sDCGPO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAI/B,OACI,sBAAKc,UAAU,OAAf,UACG,qBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,kCAAKA,SCNHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,EAETb,mBAAS,IAFA,mBAE9B0B,EAF8B,KAEtBO,EAFsB,KAWrC,OAPAC,qBAAW,WACPtB,EAASC,GACJsB,KAAOF,KACd,CAAEpB,IAKA,qCACA,mCAAOA,EAAP,OACA,qBAAKgB,UAAU,YAAf,SAGYH,EAAOJ,KAAK,SAAAc,GAAK,OACb,wBAAC,EAAD,2BAAiBA,GAAjB,IAAwBC,IAAKD,EAAMZ,eClB9Cc,EAAe,WAAO,IAAD,EAGUtC,mBAAS,CAAC,cAHpB,mBAGtBuC,EAHsB,KAGTxC,EAHS,KAK9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAEA,6BAEIwC,EAAWjB,KAAK,SAAAT,GAAQ,OACtB,cAAC,EAAD,CAEAA,SAAYA,GADPA,QAOX,2B,MCrBZ2B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.6d9922c9.chunk.js","sourcesContent":["// RAFC\r\n\r\nimport React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories } ) => {\r\n\r\n\r\n    const [inputValue , setInputValue] =  useState('');\r\n\r\n    const handleInput =(e) => {\r\n\r\n     // console.log(e.target.value)\r\n       setInputValue(e.target.value)\r\n      // console.log(e.target.value)\r\n    }\r\n\r\n   const handleSubmit = (e) => {\r\n            e.preventDefault();\r\n            \r\n            setCategories( cats => [ inputValue, ...cats ])\r\n\r\n          //  console.log('Submit Hecho');\r\n            setInputValue('');\r\n    }\r\n\r\n    const handleFocus = () => {\r\n        setInputValue('');\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n        <form onFocus={ handleFocus} onSubmit={handleSubmit}>\r\n                {/* <h2>{ inputValue}</h2> */}\r\n                <input \r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInput}\r\n                    />\r\n        </form>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired ,\r\n    \r\n}\r\n","\r\nexport const getGifs = async( category ) => {\r\n\r\n    const url =`https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category)}&api_key=LLx1yz73NdQOhLEyjklee1iTwMIlxbHG`\r\n\r\n    const resp = await fetch( url );\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img=>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n   // setimages(gifs)\r\n    return gifs;\r\n\r\n\r\n}","//rafc\r\n\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ({title,url}) => {\r\n\r\n   // console.log(title,url)\r\n\r\n    return (\r\n        <div className='card'>\r\n           <img src={ url } alt={title}/>\r\n           <p> {title}</p>\r\n        </div>\r\n    )\r\n}\r\n","// rafc\r\nimport React, { useState , useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ( {category }) => {\r\n\r\n    const [images, setImages] = useState([])\r\n\r\n    useEffect( ()=> {\r\n        getGifs( category )\r\n            .then(  setImages )\r\n    },[ category ])\r\n\r\n    \r\n\r\n    return (\r\n        <>\r\n        <h3> { category } </h3>\r\n        <div className=\"card-grid\">\r\n\r\n              {\r\n                    images.map( image=>\r\n                        <GifGridItem {...image} key={image.id}/>\r\n                    )\r\n              \r\n              }\r\n            \r\n          \r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React,{useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n\r\n    const [ categories , setCategories ] =  useState(['One Punch'])\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories= {setCategories}/>\r\n            <hr/>\r\n            {/* <button onClick={handleButton}>Agregar</button> */}\r\n            <ol>\r\n                { \r\n                categories.map( category => \r\n                  <GifGrid \r\n                  key={category}\r\n                  category ={ category}\r\n                  />\r\n                    // <li key={category}> {category}</li> \r\n                )\r\n                }\r\n            </ol>\r\n            <hr/>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n \n    <GifExpertApp />,\n \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}